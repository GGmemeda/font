1.设置Etag的好处在于：ETag是一个可以与Web资源关联的记号，检查web资源是否有变化。
2.访问局部变量是最快的。
3.数据访问，把数据放入局部变量。
cookie:Cookie就是由服务器发给客户端的特殊信息,而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。
	1.具有不可跨域名性
	2.保存中文
	3.BASE64编码：保存二进制图片
	4.Cookie一旦创建，名称便不可更改	
	5.Cookie的maxAge决定着Cookie的有效期，单位为秒（Second）：
		A.maxAge为负数的Cookie，为临时性Cookie
		B.maxAge为0，则表示删除该Cookie
		C.要想修改Cookie只能使用一个同名的Cookie来覆盖原来的Cookie	
		D.Cookie的secure属性为true.
	6.单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能超过3K。
提示：secure属性并不能对Cookie内容加密，因而不能保证绝对的安全性。如果需要高安全性，需要在程序中对Cookie内容加密、解密，以防泄密。


session:指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。
	区别:不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上.
	1.session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该Session的id（也就是HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。

安全备注:在写入 cookies 时,将 HttpOnly设置为 true

token:在使用 tokens 的时候，必须要考虑过期机制，不然攻击者就可以永久持有受害用户帐号。
	token验证标准：JWT----Token 有三个部分：header.payload.signature
http缓存:
    a.Cache-Control:
            参数:1.public:响应可以被任何缓存所缓存
                 2.private:响应信息的全部或部分用于单个用户，而不能用一个共享缓存来缓存。注意：使用 private 仅仅控制可以缓存响应的哪里，不能保证信息内容的隐私。
                 3.no-cache:防止缓存
                 4.no-store: 指令应用于整个信息，可以在响应或请求中发送
                 5.s-maxage:对于共享缓存
                 6.max-age:客户端愿意接收其绝对时间不大于指定的时间，以秒计。
                 7.min-fresh:客户端想要的一个响应，至少在指定的秒数是新的。
                 8.max-stale:客户端愿意接收一个已经超过其过期时间的响应
